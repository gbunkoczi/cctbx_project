# Script for building CCTBX
# Windows image description
# https://github.com/actions/virtual-environments/blob/master/images/win/Windows2016-Readme.md
# https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md
#
# Parameters:
#   vmImage: vs2017-win2016, windows-2019
#   vs: vs2015, vs2017
#   modules: <modules artifact name>

jobs:
- job: ${{ parameters.vs }}_win_64
  pool:
    vmImage: ${{ parameters.vmImage }}
  timeoutInMinutes: 90
  strategy:
    maxParallel: 2
    matrix:
      python2.7:
        OS: win-64
        PYTHON_VERSION: py27
        MODULES: ${{ parameters.modules }}
      python3.6:
        OS: win-64
        PYTHON_VERSION: py36
        MODULES: ${{ parameters.modules }}
      python3.7:
        OS: win-64
        PYTHON_VERSION: py37
        MODULES: ${{ parameters.modules }}
      python3.8:
        OS: win-64
        PYTHON_VERSION: py38
        MODULES: ${{ parameters.modules }}

  variables:
    artifact_name: win_$(PYTHON_VERSION)
    day: $(Get-Date -Format dddd)

  steps:
  - powershell: |
      Write-Host $(day)
      Write-Host "##vso[task.setVariable variable=day]$(day)"
    displayName: Get day of week

  - powershell: Write-Host $(day)
    displayName: Check day of week

  # install compilers
  - script: |
      choco install vcpython27 -fdv -y --debug
    condition: eq(variables['PYTHON_VERSION'], 'py27')
    displayName: Install vcpython27.msi

  - powershell: |
      Set-PSDebug -Trace 1

      $batchcontent = @"
      ECHO ON
      SET vcpython=C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0

      DIR "%vcpython%"

      CALL "%vcpython%\vcvarsall.bat" %*
      "@

      $batchDir = "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC"
      $batchPath = "$batchDir" + "\vcvarsall.bat"
      New-Item -Path $batchPath -ItemType "file" -Force

      Set-Content -Value $batchcontent -Path $batchPath

      Get-ChildItem -Path $batchDir

      Get-ChildItem -Path ($batchDir + '\..')
    condition: eq(variables['PYTHON_VERSION'], 'py27')
    displayName: Patch vs2008

  - script: |
      choco install microsoft-visual-cpp-build-tools
    condition: >
      and(not(eq(variables['PYTHON_VERSION'], 'py27')),
          eq('${{ parameters.vs }}', 'vs2015'))
    displayName: Install Visual C++ Build Tools 2015

  # download components
  - checkout: none

  - task: DownloadPipelineArtifact@2
    displayName: Download modules tarball
    inputs:
      source: 'current'
      artifact: $(MODULES)
      path: $(Pipeline.Workspace)

  - script: |
      cd $(Pipeline.Workspace)
      tar -xf modules.tar
    displayName: Extract modules tarball

  - script: |
      cd $(Pipeline.Workspace)
      copy modules\cctbx_project\libtbx\auto_build\bootstrap.py .
    displayName: Copy bootstrap.py

  # create conda environment
  - script: |
      call %CONDA%\condabin\conda.bat install -y -n base conda=4.7
    displayName: Update conda

  # - task: DownloadPipelineArtifact@2
  #   displayName: Download conda packages
  #   inputs:
  #     source: 'current'
  #     artifact: $(PYTHON_VERSION)_$(OS)
  #     path: $(Pipeline.Workspace)/channel

  # - script: |
  #     call %CONDA%\condabin\conda.bat install -y conda-build
  #     cd $(Pipeline.Workspace)\channel
  #     more filenames.txt
  #     call %CONDA%\condabin\conda.bat index $(Pipeline.Workspace)\channel
  #     echo @EXPLICIT > env.txt
  #     for /f "tokens=*" %%f in (filenames.txt) do echo file:///$(Pipeline.Workspace)\channel\%%f >> env.txt
  #     more env.txt
  #   displayName: Build local channel

  - script: |
      # call %CONDA%\condabin\conda.bat create -y --offline -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)\channel\env.txt
      call %CONDA%\condabin\conda.bat create -y -n $(PYTHON_VERSION) --file $(Pipeline.Workspace)\modules\cctbx_project\libtbx\auto_build\conda_envs\cctbx_%PYTHON_VERSION%_%OS%.txt
      call %CONDA%\condabin\conda.bat install -y -c conda-forge --no-deps -n $(PYTHON_VERSION) junit-xml
    displayName: Create conda environment

  # download daily cached build directory for builds
  # always do builds from scratch for "Update build cache" and "Weekly"
  # pipelines
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.build_cache.projectID)'
      pipeline: '$(resources.pipeline.build_cache.pipelineID)'
      artifact: '$(artifact_name)'
      path: $(Pipeline.Workspace)
    displayName: Download cached build
    condition: >
      or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
             ne(variables['day'], 'Sunday')),
         eq(variables['Build.DefinitionName'], 'CI'),
         eq(variables['Build.DefinitionName'], 'CI branch'),
         eq(variables['Build.DefinitionName'], 'Full'))
    continueOnError: true

  - script: |
      cd $(Pipeline.Workspace)
      tar -xf build.tar
    displayName: Extract build tarball
    condition: >
      or(and(eq(variables['Build.DefinitionName'], 'Update build cache'),
             ne(variables['day'], 'Sunday')),
         eq(variables['Build.DefinitionName'], 'CI'),
         eq(variables['Build.DefinitionName'], 'CI branch'),
         eq(variables['Build.DefinitionName'], 'Full'))
    continueOnError: true
    failOnStderr: false

  # build (cctbx for vs2008 and vs2015, cctbxlite for vs2017)
  - script: echo "##vso[task.setvariable variable=builder]cctbxlite"
    condition: eq('${{ parameters.vs }}', 'vs2017')

  - script: echo "##vso[task.setvariable variable=extra_modules]cma_es fable rstbx spotfinder phenix_regression phenix_examples"
    condition: eq('${{ parameters.vs }}', 'vs2017')

  - script: |
      cd $(Pipeline.Workspace)
      call "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\vcvarsall.bat" amd64
      call %CONDA%\condabin\activate.bat %PYTHON_VERSION%
      python bootstrap.py build --builder=$(builder) --use-conda=%CONDA_PREFIX% --nproc=4
      call .\build\setpaths.bat
      call libtbx.configure $(extra modules)
      cd build
      call libtbx.scons -j 4
      call libtbx.scons -j 4
    condition: eq(variables['PYTHON_VERSION'], 'py27')
    displayName: Configure and Build (Python 2)

  - script: |
      cd $(Pipeline.Workspace)
      call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64\vcvars64.bat"
      call %CONDA%\condabin\activate.bat %PYTHON_VERSION%
      python bootstrap.py build --builder=$(builder) --use-conda=%CONDA_PREFIX% --nproc=4
      call .\build\setpaths.bat
      call libtbx.configure $(extra_modules)
      cd build
      call libtbx.scons -j 4
      call libtbx.scons -j 4
    condition: not(eq(variables['PYTHON_VERSION'], 'py27'))
    displayName: Configure and Build (Python 3)

  # test
  - script: |
      cd $(Pipeline.Workspace)
      call "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\vcvarsall.bat" amd64
      call .\build\setpaths.bat
      mkdir tests
      cd tests
      call libtbx.run_tests_parallel module=boost_adaptbx module=cctbx module=cma_es module=fable module=gltbx module=iotbx module=libtbx module=rstbx module=scitbx module=smtbx module=spotfinder module=annlib_adaptbx module=cbflib_adaptbx nproc=4
    failOnStderr: false
    condition: eq(variables['PYTHON_VERSION'], 'py27')
    displayName: Test (Python 2)

  - script: |
      SET PYTHONLEGACYWINDOWSSTDIO=1
      cd $(Pipeline.Workspace)
      call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64\vcvars64.bat"
      call .\build\setpaths.bat
      mkdir tests
      cd tests
      call libtbx.run_tests_parallel module=boost_adaptbx module=cctbx module=cma_es module=fable module=gltbx module=iotbx module=libtbx module=rstbx module=scitbx module=smtbx module=spotfinder module=annlib_adaptbx module=cbflib_adaptbx nproc=4
    failOnStderr: false
    condition: not(eq(variables['PYTHON_VERSION'], 'py27'))
    displayName: Test (Python 3)

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Pipeline.Workspace)\tests\output.xml'

# preserve permissions
  - script: |
      cd $(Pipeline.Workspace)
      tar -chf build.tar build
    displayName: Build tarball
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'modules'))
    continueOnError: true

  # cache build directory every week for regular optimization build
  - publish: $(Pipeline.Workspace)/build.tar
    artifact: $(artifact_name)
    condition: >
      and(eq(variables['Build.DefinitionName'], 'Update build cache'),
          or(eq(variables['Build.Reason'], 'Schedule'),
             eq(variables['Build.Reason'], 'Manual')),
          eq(variables['System.StageAttempt'], 1),
          eq('${{ parameters.modules }}', 'modules'))
    continueOnError: true
